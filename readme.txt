GitHub репозиторий проекта: https://github.com/mulder93/shooting
Использованный движок: cocos2d-x
Вид приложения: macOS Desktop

1. Примерное количество затраченного времени: 25 часов

2. Интереснее было делать техническую часть. В создании красивых визуальных эффектов я не очень силен,
поэтому ограничился простыми программными анимациями и анимациями персонажей. Основной упор сделал на техническую часть
и на игровую составляющую (чтобы было интересно играть, пытаться улучшить результат).

3. При построении приложения использовалась одна сцена с геймплеем для простоты.
В данной сцене размещаются все цели и пистолет, а также несколько простых индикаторов (времени, счета и энергии).

В игре присутствует несколько видов целей, которые имеют общие свойства (например, их все можно сбить с помощью пули из пистолета),
но отличаются внешним видом и характеристиками. Поэтому был создан базовый класс Target.
Для создания новой цели нужно наследоваться от данного класса, переопределить нужные параметры, определить внешний вид и поведение конкретной цели. Таким образом, добавлять новые цели довольно просто.

Также все цели в игре, а также пули пистолета являются наследниками класса PhysicsBody, реализующего возможности простой физики.
В данном случае определялись столкновения между объектами. Форма объектов принималась прямоугольной.

Для определения столкновений между объектами PhysicsBody имеется класс CollisionDetector, в экземпляр которого добавляются все объекты PhysicsBody.
CollisionDetector имеет слабые указатели на объекты PhysicsBody, поэтому он не препятствует удалению объектов PhysicsBody из памяти.

4. Основная проблема - создание партикловых эффектов. Не получилось сделать что-то красивое,
поэтому решил ограничиться простыми программными анимациями.
Также из-за специфичной работы с указателями в движке cocos2d-x нет прямого способа реализации слабых указателей, поэтому
пришлось придумывать обходной механизм с проверкой количества имеющихся ссылок на объект (см. CollisionDetector.cpp).

